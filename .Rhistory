A
B
r1nsq
r1sq
r[1] * r[1]
r[n] * r[n]
r[2] * r[2]
r[2]
d[n]
d[1]
d[2]
r[1] * r[1] - r[2] * r[2] + d[2] * d[2]
*0.5
B
?tr
?t
source('C:/Users/ghj/Desktop/iot4.R')
source('C:/Users/ghj/Desktop/iot4.R')
X
A
B
source('C:/Users/ghj/Desktop/iot4.R')
source('C:/Users/ghj/Desktop/iot4.R')
source('C:/Users/ghj/Desktop/iot4.R')
source('C:/Users/ghj/Desktop/iot4.R')
source('C:/Users/ghj/Desktop/iot4.R')
source('C:/Users/ghj/Desktop/iot4.R')
source('C:/Users/ghj/Desktop/iot4.R')
source('C:/Users/ghj/Desktop/iot4.R')
source('C:/Users/ghj/Desktop/iot4.R')
source('C:/Users/ghj/Desktop/iot4.R')
source('C:/Users/ghj/Desktop/iot4.R')
source('C:/Users/ghj/Desktop/iot4.R')
d1 <- date()
d
d1
d2 <- Sys.date()
d2 <- sys.Date()
d2 <- Sys.date()
d2 <- Sys.Date()
d2
d2
d2  1
d2+
d2+1
d2
swirl()
require(swirl)
swirl()
install_from_swirl(Getting_and_Cleaning_Data)
install_from_swirl("Getting_and_Cleaning_Data"")
install_from_swirl("Getting_and_Cleaning_Data")
evaluate <-  function(func, data){}
evaluate <-  function(func, data){}
func(data)}
func(data)}
evaluate <- function(func, data){ func(data)}
evaluate(sum, c(2,4,6))
evaluate(median, c(2,4,6))
evaluate(median, c(7, 40, 9))
evaluate(floor,11.1)
printelipses <- function(...){}
printelipses <- function(...){print(...)}
printelipses("alaljldksf")
vectorelipse <- function(...){x <- ...; x[1]}
vector("abc")
vector(c("abc"))
vectorelipse("abc")
vectorelipse <- function(...){x <- list(...); x[[1]]}
vectorelipse("abc")
vectorelipse <- function(...){x <- vector(...); x[[1]]}
vectorelipse("abc")
mtcars
class(mtcars)
typeof(mtcars)
sample(6, 4)
sample(1:6, 4)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4)
sample(1:6, 4)
sample(1:6, 4)
sample(1:6, 4)
sample(1:6, 4)
sample(1:6, 4)
sample(1:6, 4)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
rbinom(1, 100, c(0.3,0.7))
rbinom(1, 100, 0.7)
rbinom(1, 100, 0.7)
rbinom(1, 100, 0.7)
rbinom(1, 100, 0.7)
rbinom(1, 100, 0.7)
rbinom(1, 100, 0.7)
rbinom(100, 1, 0.7)
rbinom(1,10,0.7)
rbinom(1,10,0.7)
rbinom(1,10,0.7)
rbinom(1,10,0.7)
rbinom(1,10,0.7)
rbinom(1,10,0.7)
rbinom(1, 100, 0.7)
rbinom(100, 1, 0.7)
rbinom(100, 100, 0.7)
x <- rnorm(10)
mean()
mean(x)
sd(x)
x <- rnorm(1000)
mean9x)
mean(x)
sd(x)
swirl()
library(swirl)
swirl()
swirl()
swirl()
require(swirl)
swirl()
?quantil
?quantile
ppm <- runif(100)
ppm
ppm
ppm  <- ppm * 10
ppm
ppm <- as.integer(ppm)
ppm
summary(ppm)
qunatile(ppm)
quantile(ppm)
quantile(ppm, probs = c(0.3, 0.6, 0.9))
quantile(ppm, probs = c(0,0.3, 0.6, 0.9,1))
?abline
abline(1,2)
abline(a = 1, b = 2)
plot.new
plot()
plot(c(1,1), c(1,1))
abline(a = 1, b = 2)
plot(c(1,10), c(1,10))
abline(a = 1, b = 2)
abline(c(1,2))
abline(c(2,1))
?abline
?hist
?rug
ppm
hist(ppm)
hist(ppm, col = "green")
rug(ppm, col = "red")
rug(ppm)
rug(ppm)
ppm <- runif(1000)
ppm <- ppm/10
ppm <- as.integer(ppm)
ppm
ppm  <- runif(1000)
ppm
ppm  <- ppm * 10
ppm
ppm  <- as.integer(ppm)
ppm
hist(ppm)
rug(ppm)
ppm <- runif(1000)
ppm  <- ppm * 100
ppm  <- as.integer(ppm)
hist(ppm)
rug(ppm)
ppm <- rnorm(1000)
ppm  <- ppm*100
ppm <- as.integer(ppm)
hist(ppm)
rug(ppm)
rug(ppm, col = 'red')
hist(ppm, col = 'green')
rug(ppm, col = 'red')
?hist
hist(ppm, col = 'green', breaks = c(10,20,40,60,80))
hist(ppm, col = 'green', breaks = 100)
table(ppm)
ppmtable <- table(ppm)
hist(ppmtable)
?mar
?par
?hist
?plot
?abline
require(swirl)
swirl()
swirl()
require(swirl0)
require(swirl)
swirl()
swirl()
head(airquality)
xyplot(Ozone~Wind, data = airquality )
xyplot(Ozone~Wind, data = airquality , col = red, pch = 8 , main = "Big Apple Data")
xyplot(Ozone~Wind, data = airquality , col = "red", pch = 8 , main = "Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), layout = c(5,1))
xyplot(Ozone~Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone~Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone~Wind, data = airquality )
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
f
xyplot(y~x|f, layout = c(2,1))
v1
v2
myedit("plot1.r")
myedit("plot1.R")
source(pathtofile("plot1.R"), local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"), local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("MyLabels.R"))
source(pathtofile("myLabels.R"))
source(pathtofile("myLabels.R"), local = TRUE)
xyplot(price~cerat | color * cut, data = diamonds, strip = FALSE, pch = 20 , xlab = myxlba, ylab = myylab, main = mymain)
xyplot(price~carat | color * cut, data = diamonds, strip = FALSE, pch = 20 , xlab = myxlba, ylab = myylab, main = mymain)
xyplot(price~carat | color * cut, data = diamonds, strip = FALSE, pch = 20 , xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat | color * cut, data = diamonds, pch = 20 , xlab = myxlab, ylab = myylab, main = mymain)
require(swirl)
swirl()
require(swilr)
require(swirl)
swirl()
str(mpg)
qplot(displ, hwy, mpg)
?qplot
qplot(displ, hwy)
qplot(displ, hwy, mpg)
skip()
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"))
qplot(displ, hwy, data = mpg, shape = drv, geom = c("point", "smooth"))
qplot(displ, hwy, data = mpg, shape = drv, col = drv, geom = c("point", "smooth"))
?geom
?qplot
qplot(displ, hwy, data = mpg, shape = drv, col = drv, geom = c("path"))
qplot(displ, hwy, data = mpg, shape = drv, col = drv, geom = c("boxplot", "jitter"))
qplot(displ, hwy, data = mpg, shape = drv, col = drv, geom = c("boxplot"))
qplot(displ, hwy, data = mpg, shape = drv, col = drv, geom = c("jitter"))
qplot(displ, hwy, data = mpg, shape = drv, col = drv
)
qplot(displ, hwy, data = mpg, shape = drv, col = drv, geom = c("jitter"))
qplot(displ, hwy, data = mpg, shape = drv, col = drv, geom = c("smooth"))
qplot(displ, hwy, data = mpg, shape = drv, col = drv, geom = c("hist"))
qplot(displ, hwy, data = mpg, shape = drv, col = drv, geom = c("dotplot"))
qplot(displ, hwy, data = mpg, shape = drv, col = drv, geom = c("boxplot"))
qplot(displ, hwy, data = mpg, shape = drv, col = drv, geom = c("points"))
qplot(displ, hwy, data = mpg, shape = drv, col = drv, geom = c("point"))
qplot(displ, hwy, data = mpg, shape = drv, col = drv, geom = c("point", "smooth"))
swirl()
qplot(hwy,mpg)
qplot(hwy, data = mpg)
qplot(hwy, data = mpg, color = drv)
qplot(hwy, data = mpg, color = drv, bandwidth = 0))
qplot(hwy, data = mpg, color = drv, bandwidth = 0)
qplot(hwy, data = mpg, color = drv, bins = 10)
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg)
qplot(hwy, data = mpg, fill = drv)
qplor(displ, hwy, data = mpg, facets = . ~ drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv ~ ., bandwidth = 2)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
require(swirl)
swirl()
require(swirl)
swirl()
require(devtools)
install.packages(devtools)
library(devtools)
install.packages("devtools")
library(devtools)
install_github("swirlify", "slidify")
library(swirlify)
swirl()
course = system.file('Courses', 'Getting and Cleaning Data', package = 'swirl')
module <- 'Module.Rda'
deck <- swirl2slidify(course, module)
module <- 'Module1.Rda'
deck <- swirl2slidify(course, module)
course
swirl()
install_from_swirl("Data Analysis")
install_from_swirl("Data_Analysis")
swirl()
require(swirl)
swirl()
swirl()
require(swirl)
swirl()
library(ggplot2)
diamonds
qplot(price, data = diamonds)
qplot(price, data = diamonds, binwidth = 1)
qplot(price, data = diamonds, binwidth = 100)
qplot(price, data = diamonds, binwidth = 1000)
qplot(price, data = diamonds, binwidth = 50)
require(mosaic)
favstats(diamonds$price)
favstats(diamonds$price)
require(tigerstats)
favstats(diamonds$price)
??favstats
favstats(diamonds$price)
require(mosaic)
require(tigerstats)
install.packages("car")
require(mosaic)
require(tigerstats)
require(car)
install.packages("pbkrtest")
mocaisc
mosaic
mosaic
favstats
require(mosaic)
diamonds
diamonds$cut
str(diamonds$cut)
str(diamonds)
Ord.factor
ct <- diamonds$cut
str(ct)
ct
head(ct)
ctt <- as.factor(ct)
head(ctt)
unclass(stt)
unclass(tt)
unclass(ctt)
carat
str(diamonds$carat)
qplot(carat, price, color = cut)
qplot(carat, price, color = cut, data = diamonds)
qplot(carat, price, color = cut, data = diamonds) + geom_smooth()
qplot(carat, price, color = cut, data = diamonds, geom = "smooth")
qplot(carat,price,data=diamonds, color=cut, facets=.~cut) + geom_smooth(method="lm")
rm(list  = ls())
swirl()
require(swirl())
swirl()
?tapply
require(swirl)
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
save.image(file="GCD_manipulating data with dplyr.rda")
getwd()
swirl()
setwd("E:/GUC/10th/Introduction to data science/Project 1/traffic-data.csv")
dir
ls
ls()
rm(list = l())
rm(list = ls())
dir
dir()
require(dplyr)
?tbl_df
df <- read.csv("all-semi-unique.csv")
tbldf <- tbl_df(df)
head(df)
tbldf[1,]
df[1,]
view(df[1,])
View(df[1,])
View(df[1:3,])
cols <- colnames(df)
cols
newcols <- "ad" %in% cols
newcols
grepl("abc","a")
?grepl
grepl("a","abc")
grepl("ad.", cols)
cols
column.names <- colnames(df)
new.col.names <- column.names[grepl("ad.", column.names)]
new.col.names
column.names <- colnames(df)
new.col.names <- column.names[-grepl("ad.", column.names)]
new.col.names
col.names
col.names <- colnames(df)
new.col.names <- col.names[-grepl("ad.", col.names)]
col.names
column.names
rm(column.names)
ccol.names
col.names <- colnames(df)
new.col.names <- col.names[-grepl("ad.", col.names)]
col.names
new.col.names
-grepl("ad.", col.names)
grepl("ad.", col.names)
-c(grepl("ad.", col.names))
col.names <- colnames(df)
ad.cols <- grepl("ad", col.names)
new.col.names <- col.names[ad.cols]
ad.cols
col.names
col.names[ad.cols]
col.names[-ad.cols]
col.names[~ad.cols]
col.names[!ad.cols]
col.names <- colnames(df)
ad.cols <- grepl("ad", col.names)
new.col.names <- col.names[!ad.cols]
new.col.names
col.names <- colnames(df)
ad.cols <- grepl("ad", col.names)
img.cols <- grepl("img", col.nems)
new.col.names <- col.names[!ad.cols]
col.names <- colnames(df)
ad.cols <- grepl("ad", col.names)
img.cols <- grepl("img", col.names)
new.col.names <- col.names[!ad.cols]
img.cols
col.names
col.names[img.cols]
col.names <- colnames(df)
ad.cols <- grepl("ad", col.names)
img.cols <- grepl("img", col.names, ignore.case = T)
new.col.names <- col.names[!ad.cols]
col.names <- colnames(df)
ad.cols <- grepl("ad", col.names)
img.cols <- grepl("img", col.names, ignore.case = T)
new.col.names <- col.names[!ad.cols]
col.names <- colnames(df)
ad.cols <- grepl("ad", col.names)
img.cols <- grepl("img", col.names, ignore.case = T)
new.col.names <- col.names[!ad.cols]
col.names <- colnames(df)
ad.cols <- grepl("ad", col.names)
img.cols <- grepl("img", col.names, ignore.case = T)
new.col.names <- col.names[!ad.cols]
img.cols
col.names <- colnames(df)
ad.cols <- grepl("ad", col.names)
img.cols <- grepl("img", col.names, ignore.case = T)
new.col.names <- col.names[!c(ad.cols,img.cols)]
new.col.names
!c(ad.cols,img.cols)
col.names <- colnames(df)
ad.cols <- which(grepl("ad", col.names))
img.cols <- which(grepl("img", col.names, ignore.case = T))
new.col.names <- col.names[!c(ad.cols,img.cols)]
ad.cols
img.cols
col.names <- colnames(df)
ad.cols <- which(grepl("ad", col.names))
img.cols <- which(grepl("img", col.names, ignore.case = T))
new.col.names <- col.names[-c(ad.cols,img.cols)]
new.col.names
